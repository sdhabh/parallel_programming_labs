# include <iostream>
# include <pthread.h>
#include <windows.h>
#include <semaphore.h> // 添加这个头文件以包含 sem_t 的定义
#include <pmmintrin.h>
#include <xmmintrin.h>
#include <emmintrin.h>
#include <smmintrin.h>
#include <tmmintrin.h>
#include <nmmintrin.h>
#include <immintrin.h> //AVX、AVX2
using namespace std;

const int n = 1000;
float A[n][n];
int NUM_THREADS = 7; //工作线程数量
void init()
{
	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < n; j++)
		{
			A[i][j] = 0;
		}
		A[i][i] = 1.0;
		for (int j = i + 1; j < n; j++)
			A[i][j] = rand() % 100;
	}

	for (int i = 0; i < n; i++)
	{
		int k1 = rand() % n;
		int k2 = rand() % n;
		for (int j = 0; j < n; j++)
		{
			A[i][j] += A[0][j];
			A[k1][j] += A[k2][j];
		}
	}
}


void f_ordinary()
{
	for (int k = 0; k < n; k++)
	{
		for (int j = k + 1; j < n; j++)
		{
			A[k][j] = A[k][j] * 1.0 / A[k][k];
		}
		A[k][k] = 1.0;

		for (int i = k + 1; i < n; i++)
		{
			for (int j = k + 1; j < n; j++)
			{
				A[i][j] = A[i][j] - A[i][k] * A[k][j];
			}
			A[i][k] = 0;
		}
	}
}


struct threadParam_t1 {
    int k; // 消去的轮次
    int t_id; // 线程 id
};

void* threadFunc1(void* param) {
    __m128 vx, vaij, vaik, vakj;

    threadParam_t1* p = (threadParam_t1*)param;
    int k = p->k;
    int t_id = p->t_id;
    int i = k + t_id + 1;

    for (int m = k + 1 + t_id; m < n; m += NUM_THREADS) {
        vaik = _mm_set1_ps(A[i][k]);
        int j;
        for (j = k + 1; j + 4 <= n; j += 4) {
            vakj = _mm_load_ps(&(A[k][j]));
            vaij = _mm_load_ps(&(A[i][j]));
            vx = _mm_mul_ps(vakj, vaik);
            vaij = _mm_sub_ps(vaij, vx);
            _mm_store_ps(&A[i][j], vaij);
        }
        for (; j < n; j++)
            A[m][j] = A[m][j] - A[m][k] * A[k][j];
        A[m][k] = 0;
    }

    return NULL;
}

void pthread_dynamic() {
    __m128 va, vt;

    for (int k = 0; k < n; k++) {
        vt = _mm_set1_ps(A[k][k]);
        int j;
        for (j = k + 1; j + 4 <= n; j += 4) {
            va = _mm_load_ps(&(A[k][j]));
            va = _mm_div_ps(va, vt);
            _mm_store_ps(&(A[k][j]), va);
        }
        for (; j < n; j++)
            A[k][j] = A[k][j] * 1.0 / A[k][k];
        A[k][k] = 1.0;

        pthread_t handles[7];
        threadParam_t1 param[7];

        for (int t_id = 0; t_id < NUM_THREADS; t_id++) {
            param[t_id].k = k;
            param[t_id].t_id = t_id;
            pthread_create(&handles[t_id], NULL, threadFunc1, (void*)&param[t_id]);
        }

        for (int t_id = 0; t_id < NUM_THREADS; t_id++)
            pthread_join(handles[t_id], NULL);
    }
}

struct threadParam_t2 {
    int t_id; // 线程 id
};

sem_t sem_main;
sem_t* sem_workerstart = new sem_t[NUM_THREADS];
sem_t* sem_workerend = new sem_t[NUM_THREADS];

void* threadFunc2(void* param) {
    __m128 vx = _mm_set1_ps(0.0f);
    __m128 vaij = _mm_set1_ps(0.0f);
    __m128 vaik = _mm_set1_ps(0.0f);
    __m128 vakj = _mm_set1_ps(0.0f);

    threadParam_t2* p = (threadParam_t2*)param;
    int t_id = p->t_id;
    for (int k = 0; k < n; k++) {
        sem_wait(&sem_workerstart[t_id]);
        for (int i = k + 1 + t_id; i < n; i += NUM_THREADS) {
            vaik = _mm_set1_ps(A[i][k]);
            int j;
            for (j = k + 1; j + 4 <= n; j += 4) {
                vakj = _mm_load_ps(&(A[k][j]));
                vaij = _mm_load_ps(&(A[i][j]));
                vx = _mm_mul_ps(vakj, vaik);
                vaij = _mm_sub_ps(vaij, vx);
                _mm_store_ps(&A[i][j], vaij);
            }
            for (; j < n; j++)
                A[i][j] = A[i][j] - A[i][k] * A[k][j];

            A[i][k] = 0.0;
        }

        sem_post(&sem_main);
        sem_wait(&sem_workerend[t_id]);
    }

    return (NULL);
}

void pthread_static_sem() {
    sem_init(&sem_main, 0, 0);
    for (int i = 0; i < NUM_THREADS; ++i) {
        sem_init(&sem_workerstart[i], 0, 0);
        sem_init(&sem_workerend[i], 0, 0);
    }

    pthread_t* handles = new pthread_t[NUM_THREADS];
    threadParam_t2* param = new threadParam_t2[NUM_THREADS];
    for (int t_id = 0; t_id < NUM_THREADS; t_id++) {
        param[t_id].t_id = t_id;
        pthread_create(&handles[t_id], NULL, threadFunc2, (void*)&param[t_id]);
    }

    __m128 va = _mm_set1_ps(0.0f);
    __m128 vt = _mm_set1_ps(0.0f);

    for (int k = 0; k < n; ++k) {
        vt = _mm_set1_ps(A[k][k]);
        int j;
        for (j = k + 1; j + 4 <= n; j += 4) {
            va = _mm_load_ps(&(A[k][j]));
            va = _mm_div_ps(va, vt);
            _mm_store_ps(&(A[k][j]), va);
        }

        for (; j < n; j++)
            A[k][j] = A[k][j] * 1.0 / A[k][k];

        A[k][k] = 1.0;

        for (int t_id = 0; t_id < NUM_THREADS; ++t_id)
            sem_post(&sem_workerstart[t_id]);

        for (int t_id = 0; t_id < NUM_THREADS; ++t_id)
            sem_wait(&sem_main);

        for (int t_id = 0; t_id < NUM_THREADS; ++t_id)
            sem_post(&sem_workerend[t_id]);
    }

    for (int t_id = 0; t_id < NUM_THREADS; t_id++)
        pthread_join(handles[t_id], NULL);

    sem_destroy(&sem_main);
    for (int i = 0; i < NUM_THREADS; ++i) {
        sem_destroy(&sem_workerstart[i]);
        sem_destroy(&sem_workerend[i]);
    }
}

pthread_barrier_t barrier_Divsion;
pthread_barrier_t barrier_Elimination;

void* threadFunc3(void* param) {
    __m128 va = _mm_set1_ps(0.0f);
    __m128 vx = _mm_set1_ps(0.0f);
    __m128 vaij = _mm_set1_ps(0.0f);
    __m128 vaik = _mm_set1_ps(0.0f);
    __m128 vakj = _mm_set1_ps(0.0f);
    __m128 vt = _mm_set1_ps(0.0f);

    threadParam_t2* p = (threadParam_t2*)param;
    int t_id = p->t_id;

    for (int k = 0; k < n; ++k) {
        vt = _mm_set1_ps(A[k][k]);
        if (t_id == 0) {
            int j;
            for (j = k + 1; j + 4 <= n; j += 4) {
                va = _mm_load_ps(&(A[k][j]));
                va = _mm_div_ps(va, vt);
                _mm_store_ps(&(A[k][j]), va);
            }

            for (; j < n; j++) {
                A[k][j] = A[k][j] * 1.0 / A[k][k];
            }
            A[k][k] = 1.0;
        }

        pthread_barrier_wait(&barrier_Divsion);

        for (int i = k + 1 + t_id; i < n; i += NUM_THREADS) {
            vaik = _mm_set1_ps(A[i][k]);
            int j;
            for (j = k + 1; j + 4 <= n; j += 4) {
                vakj = _mm_load_ps(&(A[k][j]));
                vaij = _mm_load_ps(&(A[i][j]));
                vx = _mm_mul_ps(vakj, vaik);
                vaij = _mm_sub_ps(vaij, vx);
                _mm_store_ps(&A[i][j], vaij);
            }
            for (; j < n; j++)
                A[i][j] = A[i][j] - A[i][k] * A[k][j];

            A[i][k] = 0;
        }

        pthread_barrier_wait(&barrier_Elimination);
    }
    return (NULL);
}

void pthread_static_barrier() {
    pthread_barrier_init(&barrier_Divsion, NULL, NUM_THREADS);
    pthread_barrier_init(&barrier_Elimination, NULL, NUM_THREADS);

    pthread_t* handles = new pthread_t[NUM_THREADS];
    threadParam_t2* param = new threadParam_t2[NUM_THREADS];
    for (int t_id = 0; t_id < NUM_THREADS; t_id++) {
        param[t_id].t_id = t_id;
        pthread_create(&handles[t_id], NULL, threadFunc3, (void*)&param[t_id]);
    }

    for (int t_id = 0; t_id < NUM_THREADS; t_id++)
        pthread_join(handles[t_id], NULL);

    pthread_barrier_destroy(&barrier_Divsion);
    pthread_barrier_destroy(&barrier_Elimination);
}


 




int main()
{
    double seconds;
    long long head, tail, freq, noww;


    init();
    QueryPerformanceFrequency((LARGE_INTEGER*)&freq);
    QueryPerformanceCounter((LARGE_INTEGER*)&head);//开始计时
    f_ordinary();
    QueryPerformanceCounter((LARGE_INTEGER*)&tail);//结束计时
    seconds = (tail - head) * 1000.0 / freq;//单位 ms
    cout << "  f_ordinary():" << seconds << 'ms' << endl;

    init();
    QueryPerformanceFrequency((LARGE_INTEGER*)&freq);
    QueryPerformanceCounter((LARGE_INTEGER*)&head);//开始计时
    pthread_dynamic();
    QueryPerformanceCounter((LARGE_INTEGER*)&tail);//结束计时
    seconds = (tail - head) * 1000.0 / freq;//单位 ms
    cout << " pthread_dynamic():" << seconds << 'ms' << endl;



    init();
    QueryPerformanceFrequency((LARGE_INTEGER*)&freq);
    QueryPerformanceCounter((LARGE_INTEGER*)&head);//开始计时
    pthread_static_sem();
    QueryPerformanceCounter((LARGE_INTEGER*)&tail);//结束计时
    seconds = (tail - head) * 1000.0 / freq;//单位 ms
    cout << "pthread_static_sem():" << seconds << 'ms' << endl;


    init();
    QueryPerformanceFrequency((LARGE_INTEGER*)&freq);
    QueryPerformanceCounter((LARGE_INTEGER*)&head);//开始计时
    pthread_static_barrier();
    QueryPerformanceCounter((LARGE_INTEGER*)&tail);//结束计时
    seconds = (tail - head) * 1000.0 / freq;//单位 ms
    cout << "pthread_static_barrier():" << seconds << 'ms' << endl;
}


 
