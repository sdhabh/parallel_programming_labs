#include <pthread.h>
#include <iostream>
#include <sstream>
#include <fstream>
#include <semaphore.h>
#include <windows.h>
#include <immintrin.h> // 使用 AVX 指令集
using namespace std;

//
unsigned int Act[8399][264] = { 0 };
unsigned int Pas[8399][264] = { 0 };

const int Num = 263;
const int pasNum = 4535;
const int lieNum = 8399;

/*




unsigned int Act[37960][1188] = { 0 };
unsigned int Pas[37960][1188] = { 0 };

const int Num = 1187;
const int pasNum = 14921;
const int lieNum = 37960;


unsigned int Act[23045][722] = { 0 };
unsigned int Pas[23045][722] = { 0 };

const int Num = 721;
const int pasNum = 14325;
const int lieNum = 23045;



unsigned int Act[43577][1363] = { 0 };
unsigned int Pas[54274][1363] = { 0 };

const int Num = 1362;
const int pasNum = 54274;
const int lieNum = 43577;
*/


int NUM_THREADS = 1;

sem_t sem_leader;
sem_t* sem_Next = new sem_t[NUM_THREADS - 1];

bool sign;

struct threadParam_t {
    int t_id;
};

void init_A() {
    unsigned int a;
    ifstream infile("act3.txt");
    char fin[10000] = { 0 };
    int index;
    while (infile.getline(fin, sizeof(fin))) {
        std::stringstream line(fin);
        int biaoji = 0;
        while (line >> a) {
            if (biaoji == 0) {
                index = a;
                biaoji = 1;
            }
            int k = a % 32;
            int j = a / 32;
            int temp = 1 << k;
            Act[index][Num - 1 - j] += temp;
            Act[index][Num] = 1;
        }
    }
}

void init_P() {
    unsigned int a;
    ifstream infile("pas3.txt");
    char fin[10000] = { 0 };
    int index = 0;
    while (infile.getline(fin, sizeof(fin))) {
        std::stringstream line(fin);
        int biaoji = 0;
        while (line >> a) {
            if (biaoji == 0) {
                Pas[index][Num] = a;
                biaoji = 1;
            }
            int k = a % 32;
            int j = a / 32;
            int temp = 1 << k;
            Pas[index][Num - 1 - j] += temp;
        }
        index++;
    }
}

void* threadFunc(void* param) {
    threadParam_t* p = (threadParam_t*)param;
    int t_id = p->t_id;
    __m256i va_Pas, va_Act;  // 使用 AVX 指令集

    do {
        int i;
        for (i = lieNum - 1; i - 8 >= -1; i -= 8) {
            for (int j = t_id; j < pasNum; j += NUM_THREADS) {
                while (Pas[j][Num] <= i && Pas[j][Num] >= i - 7) {
                    int index = Pas[j][Num];
                    if (Act[index][Num] == 1) {
                        int k;
                        for (k = 0; k + 8 <= Num; k += 8) {  // AVX: 每次处理 8 个元素
                            va_Pas = _mm256_loadu_si256((__m256i*) & Pas[j][k]);
                            va_Act = _mm256_loadu_si256((__m256i*) & Act[index][k]);
                            va_Pas = _mm256_xor_si256(va_Pas, va_Act);
                            _mm256_storeu_si256((__m256i*) & Pas[j][k], va_Pas);
                        }
                        for (; k < Num; k++)
                            Pas[j][k] = Pas[j][k] ^ Act[index][k];
                        int num = 0, S_num = 0;
                        for (num = 0; num < Num; num++) {
                            if (Pas[j][num] != 0) {
                                unsigned int temp = Pas[j][num];
                                while (temp != 0) {
                                    temp = temp >> 1;
                                    S_num++;
                                }
                                S_num += num * 32;
                                break;
                            }
                        }
                        Pas[j][Num] = S_num - 1;
                    }
                    else {
                        break;
                    }
                }
            }
        }

        for (i = i + 8; i >= 0; i--) {
            for (int j = t_id; j < pasNum; j += NUM_THREADS) {
                while (Pas[j][Num] == i) {
                    if (Act[i][Num] == 1) {
                        int k;
                        for (k = 0; k + 8 <= Num; k += 8) {  // AVX: 每次处理 8 个元素
                            va_Pas = _mm256_loadu_si256((__m256i*) & Pas[j][k]);
                            va_Act = _mm256_loadu_si256((__m256i*) & Act[i][k]);
                            va_Pas = _mm256_xor_si256(va_Pas, va_Act);
                            _mm256_storeu_si256((__m256i*) & Pas[j][k], va_Pas);
                        }
                        for (; k < Num; k++)
                            Pas[j][k] = Pas[j][k] ^ Act[i][k];
                        int num = 0, S_num = 0;
                        for (num = 0; num < Num; num++) {
                            if (Pas[j][num] != 0) {
                                unsigned int temp = Pas[j][num];
                                while (temp != 0) {
                                    temp = temp >> 1;
                                    S_num++;
                                }
                                S_num += num * 32;
                                break;
                            }
                        }
                        Pas[j][Num] = S_num - 1;
                    }
                    else {
                        break;
                    }
                }
            }
        }

        if (t_id == 0) {
            for (int i = 0; i < NUM_THREADS - 1; ++i)
                sem_wait(&sem_leader);
        }
        else {
            sem_post(&sem_leader);
            sem_wait(&sem_Next[t_id - 1]);
        }

        if (t_id == 0) {
            sign = false;
            for (int i = 0; i < pasNum; i++) {
                int temp = Pas[i][Num];
                if (temp == -1) {
                    continue;
                }
                if (Act[temp][Num] == 0) {
                    for (int k = 0; k < Num; k++)
                        Act[temp][k] = Pas[i][k];
                    Pas[i][Num] = -1;
                    sign = true;
                }
            }
        }

        if (t_id == 0) {
            for (int i = 0; i < NUM_THREADS - 1; ++i)
                sem_post(&sem_Next[i]);
        }

    } while (sign == true);

    return (NULL);
}

int main() {
    init_A();
    init_P();
    double seconds;
    long long head, tail, freq, noww;
    sem_init(&sem_leader, 0, 0);
    for (int i = 0; i < NUM_THREADS - 1; ++i)
        sem_init(&sem_Next[i], 0, 0);

    pthread_t* handles = new pthread_t[NUM_THREADS];
    threadParam_t* param = new threadParam_t[NUM_THREADS];

    QueryPerformanceFrequency((LARGE_INTEGER*)&freq);
    QueryPerformanceCounter((LARGE_INTEGER*)&head);//开始计时

    for (int t_id = 0; t_id < NUM_THREADS; t_id++) {
        param[t_id].t_id = t_id;
        pthread_create(&handles[t_id], NULL, threadFunc, (void*)&param[t_id]);
    }

    for (int t_id = 0; t_id < NUM_THREADS; t_id++)
        pthread_join(handles[t_id], NULL);
    QueryPerformanceCounter((LARGE_INTEGER*)&tail);//结束计时
    seconds = (tail - head) * 1000.0 / freq;//单位 ms
    cout << "pthread_static_sem():" << seconds << 'ms' << endl;

    sem_destroy(&sem_leader);
    for (int i = 0; i < NUM_THREADS - 1; ++i)
        sem_destroy(&sem_Next[i]);

    delete[] handles;
    delete[] param;

    return 0;
}
