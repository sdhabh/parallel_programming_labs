#include <iostream>
#include <sstream>
#include <fstream>
#include <windows.h>


using namespace std;

const int n = 3000;
float A[n][n];


void init()
{
	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < n; j++)
		{
			A[i][j] = 0;
		}
		A[i][i] = 1.0;
		for (int j = i + 1; j < n; j++)
			A[i][j] = rand();
	}

	for (int k = 0; k < n; k++)
	{
		for (int i = k + 1; i < n; i++)
		{
			for (int j = 0; j < n; j++)
			{
				A[i][j] += A[k][j];
			}
		}
	}
}

void f_ordinary()
{
	for (int k = 0; k < n; k++)
	{
		for (int j = k + 1; j < n; j++)
		{
			A[k][j] = A[k][j] * 1.0 / A[k][k];
		}
		A[k][k] = 1.0;

		for (int i = k + 1; i < n; i++)
		{
			for (int j = k + 1; j < n; j++)
			{
				A[i][j] = A[i][j] - A[i][k] * A[k][j];
			}
			A[i][k] = 0;
		}
	}
}

void f_unrolled()
{
	for (int k = 0; k < n; k++)
	{
		for (int j = k + 1; j < n; j++)
		{
			A[k][j] = A[k][j] * 1.0 / A[k][k];
		}
		A[k][k] = 1.0;

		for (int i = k + 1; i < n; i++)
		{
			int j = k + 1;
			for (; j + 4 <= n; j += 4)
			{
				A[i][j] = A[i][j] - A[i][k] * A[k][j];
				A[i][j + 1] = A[i][j + 1] - A[i][k] * A[k][j + 1];
				A[i][j + 2] = A[i][j + 2] - A[i][k] * A[k][j + 2];
				A[i][j + 3] = A[i][j + 3] - A[i][k] * A[k][j + 3];
			}
			for (; j < n; j++)
			{
				A[i][j] = A[i][j] - A[i][k] * A[k][j];
			}
			A[i][k] = 0;
		}
	}
}


void f_cache_optimized()
{
	const int blockSize = 64; // Choose an appropriate block size

	for (int k = 0; k < n; k++)
	{
		for (int j = k + 1; j < n; j++)
		{
			A[k][j] = A[k][j] * 1.0 / A[k][k];
		}
		A[k][k] = 1.0;

		for (int i = k + 1; i < n; i += blockSize)
		{
			int imax = min(i + blockSize, n);
			for (int j = k + 1; j < n; j += blockSize)
			{
				int jmax = min(j + blockSize, n);
				for (int ii = i; ii < imax; ii++)
				{
					for (int jj = j; jj < jmax; jj++)
					{
						A[ii][jj] = A[ii][jj] - A[ii][k] * A[k][jj];
					}
				}
			}
			for (int ii = i; ii < imax; ii++)
			{
				A[ii][k] = 0;
			}
		}
	}
}



int main()
{

	double seconds;
	long long head, tail, freq, noww;

	QueryPerformanceFrequency((LARGE_INTEGER*)&freq);
	init();
	QueryPerformanceCounter((LARGE_INTEGER*)&head);//开始计时
	f_ordinary();
	QueryPerformanceCounter((LARGE_INTEGER*)&tail);//结束计时
	seconds = (tail - head) * 1000.0 / freq;//单位 ms
	cout << seconds << 'ms' << endl;


	QueryPerformanceFrequency((LARGE_INTEGER*)&freq);
	init();
	QueryPerformanceCounter((LARGE_INTEGER*)&head);//开始计时
	f_unrolled();
	QueryPerformanceCounter((LARGE_INTEGER*)&tail);//结束计时
	seconds = (tail - head) * 1000.0 / freq;//单位 ms
	cout << seconds << " ms" << endl;




	QueryPerformanceFrequency((LARGE_INTEGER*)&freq);
	init();
	QueryPerformanceCounter((LARGE_INTEGER*)&head);//开始计时
	f_cache_optimized();
	QueryPerformanceCounter((LARGE_INTEGER*)&tail);//结束计时
	seconds = (tail - head) * 1000.0 / freq;//单位 ms
	cout << seconds << " ms" << endl;



}
